{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Filter","filter","handleFilter","value","onChange","Person","person","deleteContact","name","number","onClick","PersonForm","newName","handleAddContact","handleChange","handleChangeNumber","newNumber","onSubmit","type","Persons","persons","x","toLowerCase","includes","map","Notification","message","text","className","reason","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","useEffect","personService","event","target","preventDefault","backendPersons","personToUpdate","find","undefined","window","confirm","newContact","newPerson","setTimeout","catch","error","console","log","concat","msg","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d924ed4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request=axios.delete(`${baseUrl}/${id}`)\r\n  return request.then()\r\n}\r\nconst update = (id,newObject) => {\r\n  const request=axios.put(`${baseUrl}/${id}`,newObject)\r\n  return request.then(response=>response.data)\r\n}\r\nexport default {\r\n  getAll,\r\n  create,\r\n  remove,\r\n  update\r\n}","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\nconst Filter = ({ filter, handleFilter }) =>\n  <div>\n    filter shown with\n    <input value={filter} onChange={handleFilter} />\n  </div>\n\nconst Person = ({ person, deleteContact }) =>\n  <div>\n    {person.name} {person.number} <button onClick={() => deleteContact(person.id)}>delete</button>\n  </div>\nconst PersonForm = ({ newName, handleAddContact,\n  handleChange, handleChangeNumber, newNumber }) =>\n  <form onSubmit={handleAddContact}>\n    <div>\n      name: <input value={newName} onChange={handleChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleChangeNumber} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n\nconst Persons = ({ persons, filter, deleteContact }) =>\n  persons.filter(x => x.name.toLowerCase().includes(filter.toLowerCase())).map(\n    person =>\n      <Person key={person.name} person={person} deleteContact={deleteContact} />\n  )\nconst Notification = ({message}) => {\n  if(message.text===null) return null\n  return(\n    <div className={message.reason}>\n      {message.text}\n    </div>\n  )\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState({text: null, reason: null})\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(persons => setPersons(persons))\n  }, [])\n  const handleAddContact = (event) => {\n    event.preventDefault()\n    personService\n      .getAll()\n      .then(backendPersons => {\n        const personToUpdate = backendPersons.find(person => person.name === newName)\n        if (personToUpdate !== undefined) {\n\n          if (window.confirm(`${newName}  is already added to phonebook, replace the old number with the new one?`)) {\n            const newContact = { name: newName, number: newNumber }\n            personService\n              .update(personToUpdate.id, newContact)\n              .then(newPerson => {\n                setPersons(persons.map(x => x.id !== newPerson.id ? x : newPerson))\n                setNotificationMessage({text:`Replaced ${newPerson.name}'s number`, reason:'success'})\n                setTimeout(() => {\n                  setNotificationMessage({text:null, reason:null})\n                }, 5000)\n                setNewName('')\n                setNewNumber('')\n                \n              })\n              .catch(error => {\n                setNotificationMessage({text:`Information of ${newName} has already been removed from server`, reason:'error'})\n                setTimeout(() => {\n                  setNotificationMessage({text:null, reason:null})\n                }, 5000)\n              })\n          }\n          else {\n              setNewName('')\n              setNewNumber('')\n          }\n        }\n        else {\n          const newContact = { name: newName, number: newNumber }\n          personService\n            .create(newContact)\n            .then(newPerson => {\n              console.log(newPerson)\n              setPersons(persons.concat(newPerson))\n              const msg={text:`Added ${newName}`, reason:'success'}\n              setNotificationMessage(msg)\n              setTimeout(() => {\n                setNotificationMessage({text:null, reason:null})\n              }, 5000)\n              setNewName('')\n              setNewNumber('')\n            })\n        }\n      })\n\n  }\n  const deleteContact = (id) => {\n    personService\n      .remove(id)\n      .then(() => {\n        setPersons(persons.filter(x => x.id !== id))\n      })\n\n  }\n  const handleChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleChangeNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Filter filter={filter} handleFilter={handleFilter} />\n      <h2>add a new </h2>\n      <PersonForm newName={newName} handleAddContact={handleAddContact}\n        handleChange={handleChange} handleChangeNumber={handleChangeNumber}\n        newNumber={newNumber}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} deleteContact={deleteContact} />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}